trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'
  artifactName: 'drop'
  releasablesWorkingDirectory: '$(Pipeline.Workspace)/$(artifactName)/releasables'
  deployEarthScriptPath: '$(releasablesWorkingDirectory)/deploy-earth.ps1'
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isPR: $[startsWith(variables['Build.SourceBranch'], 'refs/pull/')]

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
      demands:
      - npm

    variables:
      dotnetSdkVersion: '5.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: '$(Build.ArtifactStagingDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy releasables to artifacts'
      inputs:
        contents: releasables/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: $(artifactName)

- template: azure-pipeline-templates/stage-deploy-earth.yml
  parameters:
    condition: and(succeeded(), eq(variables.isPR, 'true'))
    stageName: PullRequest
    environmentName: 'pr$(System.PullRequest.PullRequestNumber)'
    dependsOn: Build
    azureSubscriptionName: Development
    releasablesWorkingDirectory: $(releasablesWorkingDirectory)

- template: azure-pipeline-templates/stage-deploy-earth.yml
  parameters:
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    stageName: Development
    environmentName: dev
    dependsOn: Build
    azureSubscriptionName: Development
    releasablesWorkingDirectory: $(releasablesWorkingDirectory)
    
  # - deployment: Destroy
  #   dependsOn: Deploy
  #   pool:
  #     vmImage: 'ubuntu-20.04'
  #   environment: Development
  #   variables:
  #   - group: Release
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - download: current
  #           artifact: $(artifactName)
  #         - task: AzureCLI@2
  #           displayName: 'Destroy'
  #           condition: succeeded()
  #           inputs:
  #             azureSubscription: 'Development'
  #             workingDirectory: '$(releasablesWorkingDirectory)'
  #             scriptType: pscore
  #             arguments: '-EnvironmentName pr$(System.PullRequest.PullRequestNumber)'
  #             scriptPath: '$(deployEarthScriptPath)'

# - stage: 'Development'
#   displayName: 'Deploy to the Development environment'
#   dependsOn: Build
#   condition: and(succeeded(), eq(variables.isMain, 'true'))
#   jobs:
#   - deployment: Deploy
#     pool:
#       vmImage: 'ubuntu-20.04'
#     environment: Development
#     variables:
#     - group: Release
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: $(artifactName)
#           - task: AzureCLI@2
#             displayName: 'Deploy'
#             inputs:
#               azureSubscription: 'Development'
#               workingDirectory: '$(releasablesWorkingDirectory)'
#               scriptType: pscore
#               arguments: '-EnvironmentName dev'
#               scriptPath: '$(deployEarthScriptPath)'

# - stage: 'Staging'
#   displayName: 'Deploy to the Staging environment'
#   dependsOn:
#   - Build
#   - Development
#   condition: succeeded()
#   jobs:
#   - deployment: Deploy
#     pool:
#       vmImage: 'ubuntu-20.04'
#     environment: Staging
#     variables:
#     - group: Release
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: $(artifactName)
#           - task: AzureCLI@2
#             displayName: 'Deploy'
#             inputs:
#               azureSubscription: 'Staging'
#               workingDirectory: '$(releasablesWorkingDirectory)'
#               scriptType: pscore
#               arguments: '-EnvironmentName stg'
#               scriptPath: '$(deployEarthScriptPath)'

# - stage: 'Production'
#   displayName: 'Deploy to the Production environment'
#   dependsOn:
#   - Build
#   - Staging
#   condition: succeeded()
#   jobs:
#   - deployment: Deploy
#     pool:
#       vmImage: 'ubuntu-20.04'
#     environment: Production
#     variables:
#     - group: Release
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: $(artifactName)
#           - task: AzureCLI@2
#             displayName: 'Deploy'
#             inputs:
#               azureSubscription: 'Production'
#               workingDirectory: '$(releasablesWorkingDirectory)'
#               scriptType: pscore
#               arguments: '-EnvironmentName prod'
#               scriptPath: '$(deployEarthScriptPath)'